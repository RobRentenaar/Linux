#!/bin/bash

##################################################################
# ***Script to to deploy commands or scripts on multiple hosts***#
#                                                                #
# V1.0 (Rob Rentenaar) = Initial creation with the ability       #
# to deploy scripts and commands based on a hostlists            #
#                                                                #
# V2.0 (Rob Rentenaar) = ping_check added to check if hosts      #
# in hostlist are online                                         #
#                                                                #
# V3.0 (Rob Rentenaar) = Changed the script function             #
# to allow the script to be ran as root                          #
#                                                                #
# V4.0 (Rob Rentenaar) = Added the format_start and end          #
# function + output redirection for scripts and commands         #
#                                                                #
# V5.0 (Rob Rentenaar) = Added feauture to add servers           #
##################################################################
cat << EOF
  ________               _____
 /  _____/  ____   _____/ ____\__.__.
/   \  ___ /  _ \ /  _ \   __<   |  |
\    \_\  (  <_> |  <_> )  |  \___  |
 \______  /\____/ \____/|__|  / ____|
        \/                    \/
EOF
echo " "; echo " "
### Variables for user and filename
USR="bash"
FILE=/tmp/goofy_$(date +"%m_%d_%Y"_$RANDOM)
### Check on which systems the script is used and assing variable as needed
site_check() {
if [[ $(whoami) = $USR ]]
         then
                format_start
                echo "User is correct ($USR) ☑ done"
                format_end
else
        format_start
        echo "Choose correct user ☒ fail"
        format_end
        exit 1
fi
}
### Formatting (start)
format_start() {
        echo "********************************************************************"
}
### Formatting (end)
format_end() {
         echo "********************************************************************"
         echo " "
}
### Ask for the script that needs to be deployed
script() {
        format_start
        echo -n "Which script do you want to deploy? "
        read SCRIPT
        format_end
}
### Ask for the command that needs to be deployed
cmd() {
        format_start
        echo -n "Which command would you like to deploy? "
        read CMD
        format_end
}
### Ask for the hostlist that the script or command needs to be deployed on
host_list() {
        format_start
        echo -n "Which hostlist do you want to use? "
        read HOSTS
        format_end
}
### Check if hosts are online in hostlist
ping_check() {
        rm /tmp/.online.txt 2>/dev/null
        rm /tmp/.offline.txt 2>/dev/null

        format_start
        for SRV in $(cat ${HOSTS})
        do
                ping -c 1 -w 1 ${SRV} > /dev/null 2>&1
                if [ $? = 0 ]
                 then
                  echo "${SRV} is Online ☑ done" | tee -a /tmp/.online.txt
                else
                  echo "${SRV} is Offline ☒ fail" | tee -a /tmp/.offline.txt
                fi
        done

        if [[ $(wc -l /tmp/.offline.txt 2>/dev/null | awk '{print $1}') -gt 0 ]]
         then
          format_start
          echo "Please check the servers below, they are not reachable. Program is stopped ☒ fail"
          cat /tmp/.offline.txt
          format_end
          exit 1
        fi
        format_end
}
### Check if script exists
script_check() {
        if [[ -f "$SCRIPT" ]]
         then
          format_start
          echo "$SCRIPT exists ☑ done"
          format_end
        else
         format_start
         echo "$SCRIPT does not exist ☒ fail"
         format_end
         exit 1
        fi
}
### The for loop to deploy the script on the hosts defined in the for loop
script_loop() {
        FILE=/tmp/goofy_$(date +"%m_%d_%Y"_$RANDOM)
        for H in $(cat ${HOSTS})
         do
          scp $SCRIPT ${USR}@${H}:/tmp &> /dev/null
          H1=$(md5sum $SCRIPT | awk '{print $1}')
          H2=$(ssh ${USR}@${H} "md5sum /tmp/$SCRIPT | awk '{print \$1}'")
           if [[ $H1 = $H2 ]]
            then
             format_start
             echo "Hashes are the same $H ☑ done"
             format_end
             ssh ${USR}@${H} "chmod 700 /tmp/$SCRIPT"
             format_start | tee -a $FILE
             echo "#### $H" | tee -a $FILE
             ssh ${USR}@${H} "sudo sh /tmp/$SCRIPT" | tee -a $FILE
             format_end | tee -a $FILE
             ssh ${USR}@${H} "rm /tmp/$SCRIPT"
            else
             format_start
             echo "Hashes are not the same $H ☒ fail"
             format_end
             exit 1
           fi
         done
}
### The for loop to deploy the the command on the hosts defined in the for loop
        cmd_loop() {
                for H in $(cat ${HOSTS})
                 do
                  format_start | tee -a $FILE
                  echo "#### $H" | tee -a $FILE
                  ssh ${USR}@${H} "sudo ${CMD}" | tee -a $FILE
                  format_end | tee -a $FILE
                done
}
### Add new machines
add_server() {
        format_start
        echo -n "What is the ip of the server that you want to add? "
        read IP
        format_end
        format_start
        echo -n "What user do you want use to login? "
        read USR1
        format_end
        format_start
        echo "#### Adding the bash user"
        ssh -t ${USR1}@${IP} 'sudo useradd bash -m -c "Automation user for Goofy" -s /bin/bash'
        format_end
        format_start
        echo "#### Setting password for bash user"
        ssh -t ${USR1}@${IP} 'sudo passwd bash'
        format_end
        format_start
        echo "#### Creating needed sudo role"
        ssh -t ${USR1}@${IP} 'echo "bash    ALL=(root) NOPASSWD: ALL" | sudo tee -a /etc/sudoers > /dev/null'
        format_end
        format_start
        echo "### Exporting ssh keys for the bash user"
        ssh-copy-id bash@$IP
        format_end
}
### Case statement
format_start
echo "Would you like to deploy a script or a command? " && echo " "
echo "1 - Script"
echo "2 - Command"
echo "3 - Add server"
read type;
format_end

case ${type} in
  1) # Script
        script
        host_list
        site_check
        script_check
        ping_check
        script_loop
;;
  2) # Command
        cmd
        host_list
        ping_check
        site_check
        cmd_loop
;;
  3) # Add server
        add_server
;;
  *) echo "Please choose an option"
;;
